'use babel';
import _ from 'lodash';
class CodeSelector {
    constructor(editor) {
        this.codeFolds = [];
        this.editor = editor;
        this.calculateCodeFolds();
    }
    calculateCodeFolds() {
        this.getFoldStarts();
        this.getFoldEnds();
    }
    getFoldStarts() {
        for (let i = 0; i < this.editor.getLineCount(); i++) {
            if (this.editor.isFoldableAtBufferRow(i)) {
                let codeFold = {
                    start: i,
                    indentation: this.editor.indentationForBufferRow(i),
                };
                this.codeFolds.push(codeFold);
            }
        }
    }
    getFoldEnds() {
        for (let i in this.codeFolds) {
            const codeFold = this.codeFolds[i];
            const startIndent = codeFold.indentation;
            let foldEnd = parseInt(codeFold.start);
            let skipLine = false;
            while (this.editor.indentationForBufferRow(++foldEnd) > startIndent ||
                skipLine) {
                const nextLineText = this.editor.lineTextForBufferRow(foldEnd + 1);
                if (nextLineText) {
                    skipLine = nextLineText.match(/^\s+$/) || nextLineText.length === 0;
                }
            }
            codeFold.end = foldEnd;
            codeFold.marker = this.editor.markBufferRange([
                [codeFold.start, 0],
                [foldEnd, 9001],
            ]);
        }
    }
    getFoldForRange(range) {
        const startRow = range.start.row;
        const endRow = range.end.row;
        // Start checking for folds near the middle of the range
        let checkRow = endRow - Math.ceil((endRow - startRow) / 2);
        // Store the current search results end row and fold for comparison and return;
        let foldEnd = endRow;
        let fold;
        // Store a fold to use if we cant find the exact one we want
        let fallbackFold;
        do {
            if (this.editor.isFoldableAtBufferRow(checkRow)) {
                fold = _.find(this.codeFolds, { start: checkRow });
                if (fold) {
                    if (!fallbackFold || checkRow >= startRow) {
                        fallbackFold = fold;
                    }
                    foldEnd = fold.end;
                }
            }
            checkRow--;
        } while (foldEnd <= endRow && checkRow > 0);
        if (foldEnd > endRow) {
            return fold;
        }
        else {
            return fallbackFold;
        }
    }
}
export default CodeSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZVNlbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3N0ZXBzaXplL0NvZGVTZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7QUFJWixPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFFdkI7SUFJRSxZQUFZLE1BQWU7UUFGbkIsY0FBUyxHQUFlLEVBQUUsQ0FBQztRQUdqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRU8sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVPLGFBQWE7UUFDbkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLElBQUksUUFBUSxHQUFHO29CQUNiLEtBQUssRUFBRSxDQUFDO29CQUNSLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztpQkFDcEQsQ0FBQztnQkFDRixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFTyxXQUFXO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUN6QyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZDLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztZQUNyQixPQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxXQUFXO2dCQUM1RCxRQUFRLEVBQ1IsQ0FBQztnQkFDRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDbkUsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDakIsUUFBUSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7Z0JBQ3RFLENBQUM7WUFDSCxDQUFDO1lBQ0QsUUFBUSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7WUFDdkIsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztnQkFDNUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDbkIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO2FBQ2hCLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDO0lBRU0sZUFBZSxDQUFDLEtBQWE7UUFDbEMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDakMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDN0Isd0RBQXdEO1FBQ3hELElBQUksUUFBUSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNELCtFQUErRTtRQUMvRSxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUM7UUFDVCw0REFBNEQ7UUFDNUQsSUFBSSxZQUFZLENBQUM7UUFDakIsR0FBRyxDQUFDO1lBQ0YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDbkQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDVCxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDMUMsWUFBWSxHQUFHLElBQUksQ0FBQztvQkFDdEIsQ0FBQztvQkFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDckIsQ0FBQztZQUNILENBQUM7WUFDRCxRQUFRLEVBQUUsQ0FBQztRQUNiLENBQUMsUUFBUSxPQUFPLElBQUksTUFBTSxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7UUFDNUMsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVELGVBQWUsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5cbmltcG9ydCBJUmFuZ2UgPSBUZXh0QnVmZmVyLklSYW5nZTtcbmltcG9ydCBJRWRpdG9yID0gQXRvbUNvcmUuSUVkaXRvcjtcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNsYXNzIENvZGVTZWxlY3RvciB7XG4gIHByaXZhdGUgZWRpdG9yOiBJRWRpdG9yO1xuICBwcml2YXRlIGNvZGVGb2xkczogQXJyYXk8YW55PiA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGVkaXRvcjogSUVkaXRvcikge1xuICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuICAgIHRoaXMuY2FsY3VsYXRlQ29kZUZvbGRzKCk7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUNvZGVGb2xkcygpIHtcbiAgICB0aGlzLmdldEZvbGRTdGFydHMoKTtcbiAgICB0aGlzLmdldEZvbGRFbmRzKCk7XG4gIH1cblxuICBwcml2YXRlIGdldEZvbGRTdGFydHMoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVkaXRvci5nZXRMaW5lQ291bnQoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5lZGl0b3IuaXNGb2xkYWJsZUF0QnVmZmVyUm93KGkpKSB7XG4gICAgICAgIGxldCBjb2RlRm9sZCA9IHtcbiAgICAgICAgICBzdGFydDogaSxcbiAgICAgICAgICBpbmRlbnRhdGlvbjogdGhpcy5lZGl0b3IuaW5kZW50YXRpb25Gb3JCdWZmZXJSb3coaSksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29kZUZvbGRzLnB1c2goY29kZUZvbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rm9sZEVuZHMoKSB7XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLmNvZGVGb2xkcykge1xuICAgICAgY29uc3QgY29kZUZvbGQgPSB0aGlzLmNvZGVGb2xkc1tpXTtcbiAgICAgIGNvbnN0IHN0YXJ0SW5kZW50ID0gY29kZUZvbGQuaW5kZW50YXRpb247XG4gICAgICBsZXQgZm9sZEVuZCA9IHBhcnNlSW50KGNvZGVGb2xkLnN0YXJ0KTtcbiAgICAgIGxldCBza2lwTGluZSA9IGZhbHNlO1xuICAgICAgd2hpbGUgKFxuICAgICAgICB0aGlzLmVkaXRvci5pbmRlbnRhdGlvbkZvckJ1ZmZlclJvdygrK2ZvbGRFbmQpID4gc3RhcnRJbmRlbnQgfHxcbiAgICAgICAgc2tpcExpbmVcbiAgICAgICkge1xuICAgICAgICBjb25zdCBuZXh0TGluZVRleHQgPSB0aGlzLmVkaXRvci5saW5lVGV4dEZvckJ1ZmZlclJvdyhmb2xkRW5kICsgMSk7XG4gICAgICAgIGlmIChuZXh0TGluZVRleHQpIHtcbiAgICAgICAgICBza2lwTGluZSA9IG5leHRMaW5lVGV4dC5tYXRjaCgvXlxccyskLykgfHwgbmV4dExpbmVUZXh0Lmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29kZUZvbGQuZW5kID0gZm9sZEVuZDtcbiAgICAgIGNvZGVGb2xkLm1hcmtlciA9IHRoaXMuZWRpdG9yLm1hcmtCdWZmZXJSYW5nZShbXG4gICAgICAgIFtjb2RlRm9sZC5zdGFydCwgMF0sXG4gICAgICAgIFtmb2xkRW5kLCA5MDAxXSxcbiAgICAgIF0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRGb2xkRm9yUmFuZ2UocmFuZ2U6IElSYW5nZSkge1xuICAgIGNvbnN0IHN0YXJ0Um93ID0gcmFuZ2Uuc3RhcnQucm93O1xuICAgIGNvbnN0IGVuZFJvdyA9IHJhbmdlLmVuZC5yb3c7XG4gICAgLy8gU3RhcnQgY2hlY2tpbmcgZm9yIGZvbGRzIG5lYXIgdGhlIG1pZGRsZSBvZiB0aGUgcmFuZ2VcbiAgICBsZXQgY2hlY2tSb3cgPSBlbmRSb3cgLSBNYXRoLmNlaWwoKGVuZFJvdyAtIHN0YXJ0Um93KSAvIDIpO1xuICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHNlYXJjaCByZXN1bHRzIGVuZCByb3cgYW5kIGZvbGQgZm9yIGNvbXBhcmlzb24gYW5kIHJldHVybjtcbiAgICBsZXQgZm9sZEVuZCA9IGVuZFJvdztcbiAgICBsZXQgZm9sZDtcbiAgICAvLyBTdG9yZSBhIGZvbGQgdG8gdXNlIGlmIHdlIGNhbnQgZmluZCB0aGUgZXhhY3Qgb25lIHdlIHdhbnRcbiAgICBsZXQgZmFsbGJhY2tGb2xkO1xuICAgIGRvIHtcbiAgICAgIGlmICh0aGlzLmVkaXRvci5pc0ZvbGRhYmxlQXRCdWZmZXJSb3coY2hlY2tSb3cpKSB7XG4gICAgICAgIGZvbGQgPSBfLmZpbmQodGhpcy5jb2RlRm9sZHMsIHsgc3RhcnQ6IGNoZWNrUm93IH0pO1xuICAgICAgICBpZiAoZm9sZCkge1xuICAgICAgICAgIGlmICghZmFsbGJhY2tGb2xkIHx8IGNoZWNrUm93ID49IHN0YXJ0Um93KSB7XG4gICAgICAgICAgICBmYWxsYmFja0ZvbGQgPSBmb2xkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb2xkRW5kID0gZm9sZC5lbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUm93LS07XG4gICAgfSB3aGlsZSAoZm9sZEVuZCA8PSBlbmRSb3cgJiYgY2hlY2tSb3cgPiAwKTtcbiAgICBpZiAoZm9sZEVuZCA+IGVuZFJvdykge1xuICAgICAgcmV0dXJuIGZvbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxsYmFja0ZvbGQ7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvZGVTZWxlY3RvcjtcbiJdfQ==