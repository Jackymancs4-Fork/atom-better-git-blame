'use babel';
import _ from 'lodash';
class CodeSelector {
    constructor(editor) {
        this.codeFolds = [];
        this.editor = editor;
        this.calculateCodeFolds();
    }
    calculateCodeFolds() {
        this.getFoldStarts();
        this.getFoldEnds();
    }
    getFoldStarts() {
        for (let i = 0; i < this.editor.getLineCount(); i++) {
            if (this.editor.isFoldableAtBufferRow(i)) {
                let codeFold = {
                    start: i,
                    indentation: this.editor.indentationForBufferRow(i),
                };
                this.codeFolds.push(codeFold);
            }
        }
    }
    getFoldEnds() {
        for (let i in this.codeFolds) {
            const codeFold = this.codeFolds[i];
            const startIndent = codeFold.indentation;
            let foldEnd = parseInt(codeFold.start);
            let skipLine = false;
            while (this.editor.indentationForBufferRow(++foldEnd) > startIndent ||
                skipLine) {
                const nextLineText = this.editor.lineTextForBufferRow(foldEnd + 1);
                skipLine = nextLineText.match(/^\s+$/) || nextLineText.length === 0;
            }
            codeFold.end = foldEnd;
            codeFold.marker = this.editor.markBufferRange([
                [codeFold.start, 0],
                [foldEnd, 9001],
            ]);
        }
    }
    getFoldForRange(range) {
        const startRow = range.start.row;
        const endRow = range.end.row;
        // Start checking for folds near the middle of the range
        let checkRow = endRow - Math.ceil((endRow - startRow) / 2);
        // Store the current search results end row and fold for comparison and return;
        let foldEnd = endRow;
        let fold;
        // Store a fold to use if we cant find the exact one we want
        let fallbackFold;
        do {
            if (this.editor.isFoldableAtBufferRow(checkRow)) {
                fold = _.find(this.codeFolds, { start: checkRow });
                if (fold) {
                    if (!fallbackFold || checkRow >= startRow) {
                        fallbackFold = fold;
                    }
                    foldEnd = fold.end;
                }
            }
            checkRow--;
        } while (foldEnd <= endRow && checkRow > 0);
        if (foldEnd > endRow) {
            return fold;
        }
        else {
            return fallbackFold;
        }
    }
}
export default CodeSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZVNlbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3N0ZXBzaXplL0NvZGVTZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7QUFJWixPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFFdkI7SUFJRSxZQUFZLE1BQWU7UUFGbkIsY0FBUyxHQUFlLEVBQUUsQ0FBQztRQUdqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRU8sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVPLGFBQWE7UUFDbkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLElBQUksUUFBUSxHQUFHO29CQUNiLEtBQUssRUFBRSxDQUFDO29CQUNSLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztpQkFDcEQsQ0FBQztnQkFDRixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFTyxXQUFXO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUN6QyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZDLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztZQUNyQixPQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxXQUFXO2dCQUM1RCxRQUFRLEVBQ1IsQ0FBQztnQkFDRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDbkUsUUFBUSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7WUFDdEUsQ0FBQztZQUNELFFBQVEsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1lBQ3ZCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7Z0JBQzVDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ25CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQzthQUNoQixDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUVNLGVBQWUsQ0FBQyxLQUFhO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzdCLHdEQUF3RDtRQUN4RCxJQUFJLFFBQVEsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzRCwrRUFBK0U7UUFDL0UsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDO1FBQ1QsNERBQTREO1FBQzVELElBQUksWUFBWSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQztZQUNGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ25ELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQzFDLFlBQVksR0FBRyxJQUFJLENBQUM7b0JBQ3RCLENBQUM7b0JBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3JCLENBQUM7WUFDSCxDQUFDO1lBQ0QsUUFBUSxFQUFFLENBQUM7UUFDYixDQUFDLFFBQVEsT0FBTyxJQUFJLE1BQU0sSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgSVJhbmdlID0gVGV4dEJ1ZmZlci5JUmFuZ2U7XG5pbXBvcnQgSUVkaXRvciA9IEF0b21Db3JlLklFZGl0b3I7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jbGFzcyBDb2RlU2VsZWN0b3Ige1xuICBwcml2YXRlIGVkaXRvcjogSUVkaXRvcjtcbiAgcHJpdmF0ZSBjb2RlRm9sZHM6IEFycmF5PGFueT4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihlZGl0b3I6IElFZGl0b3IpIHtcbiAgICB0aGlzLmVkaXRvciA9IGVkaXRvcjtcbiAgICB0aGlzLmNhbGN1bGF0ZUNvZGVGb2xkcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVDb2RlRm9sZHMoKSB7XG4gICAgdGhpcy5nZXRGb2xkU3RhcnRzKCk7XG4gICAgdGhpcy5nZXRGb2xkRW5kcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGb2xkU3RhcnRzKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lZGl0b3IuZ2V0TGluZUNvdW50KCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZWRpdG9yLmlzRm9sZGFibGVBdEJ1ZmZlclJvdyhpKSkge1xuICAgICAgICBsZXQgY29kZUZvbGQgPSB7XG4gICAgICAgICAgc3RhcnQ6IGksXG4gICAgICAgICAgaW5kZW50YXRpb246IHRoaXMuZWRpdG9yLmluZGVudGF0aW9uRm9yQnVmZmVyUm93KGkpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvZGVGb2xkcy5wdXNoKGNvZGVGb2xkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEZvbGRFbmRzKCkge1xuICAgIGZvciAobGV0IGkgaW4gdGhpcy5jb2RlRm9sZHMpIHtcbiAgICAgIGNvbnN0IGNvZGVGb2xkID0gdGhpcy5jb2RlRm9sZHNbaV07XG4gICAgICBjb25zdCBzdGFydEluZGVudCA9IGNvZGVGb2xkLmluZGVudGF0aW9uO1xuICAgICAgbGV0IGZvbGRFbmQgPSBwYXJzZUludChjb2RlRm9sZC5zdGFydCk7XG4gICAgICBsZXQgc2tpcExpbmUgPSBmYWxzZTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgdGhpcy5lZGl0b3IuaW5kZW50YXRpb25Gb3JCdWZmZXJSb3coKytmb2xkRW5kKSA+IHN0YXJ0SW5kZW50IHx8XG4gICAgICAgIHNraXBMaW5lXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgbmV4dExpbmVUZXh0ID0gdGhpcy5lZGl0b3IubGluZVRleHRGb3JCdWZmZXJSb3coZm9sZEVuZCArIDEpO1xuICAgICAgICBza2lwTGluZSA9IG5leHRMaW5lVGV4dC5tYXRjaCgvXlxccyskLykgfHwgbmV4dExpbmVUZXh0Lmxlbmd0aCA9PT0gMDtcbiAgICAgIH1cbiAgICAgIGNvZGVGb2xkLmVuZCA9IGZvbGRFbmQ7XG4gICAgICBjb2RlRm9sZC5tYXJrZXIgPSB0aGlzLmVkaXRvci5tYXJrQnVmZmVyUmFuZ2UoW1xuICAgICAgICBbY29kZUZvbGQuc3RhcnQsIDBdLFxuICAgICAgICBbZm9sZEVuZCwgOTAwMV0sXG4gICAgICBdKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0Rm9sZEZvclJhbmdlKHJhbmdlOiBJUmFuZ2UpIHtcbiAgICBjb25zdCBzdGFydFJvdyA9IHJhbmdlLnN0YXJ0LnJvdztcbiAgICBjb25zdCBlbmRSb3cgPSByYW5nZS5lbmQucm93O1xuICAgIC8vIFN0YXJ0IGNoZWNraW5nIGZvciBmb2xkcyBuZWFyIHRoZSBtaWRkbGUgb2YgdGhlIHJhbmdlXG4gICAgbGV0IGNoZWNrUm93ID0gZW5kUm93IC0gTWF0aC5jZWlsKChlbmRSb3cgLSBzdGFydFJvdykgLyAyKTtcbiAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzZWFyY2ggcmVzdWx0cyBlbmQgcm93IGFuZCBmb2xkIGZvciBjb21wYXJpc29uIGFuZCByZXR1cm47XG4gICAgbGV0IGZvbGRFbmQgPSBlbmRSb3c7XG4gICAgbGV0IGZvbGQ7XG4gICAgLy8gU3RvcmUgYSBmb2xkIHRvIHVzZSBpZiB3ZSBjYW50IGZpbmQgdGhlIGV4YWN0IG9uZSB3ZSB3YW50XG4gICAgbGV0IGZhbGxiYWNrRm9sZDtcbiAgICBkbyB7XG4gICAgICBpZiAodGhpcy5lZGl0b3IuaXNGb2xkYWJsZUF0QnVmZmVyUm93KGNoZWNrUm93KSkge1xuICAgICAgICBmb2xkID0gXy5maW5kKHRoaXMuY29kZUZvbGRzLCB7IHN0YXJ0OiBjaGVja1JvdyB9KTtcbiAgICAgICAgaWYgKGZvbGQpIHtcbiAgICAgICAgICBpZiAoIWZhbGxiYWNrRm9sZCB8fCBjaGVja1JvdyA+PSBzdGFydFJvdykge1xuICAgICAgICAgICAgZmFsbGJhY2tGb2xkID0gZm9sZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9sZEVuZCA9IGZvbGQuZW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Jvdy0tO1xuICAgIH0gd2hpbGUgKGZvbGRFbmQgPD0gZW5kUm93ICYmIGNoZWNrUm93ID4gMCk7XG4gICAgaWYgKGZvbGRFbmQgPiBlbmRSb3cpIHtcbiAgICAgIHJldHVybiBmb2xkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsbGJhY2tGb2xkO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2RlU2VsZWN0b3I7XG4iXX0=