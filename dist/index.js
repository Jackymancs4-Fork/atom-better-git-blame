'use babel';
import SelectionWatcher from './stepsize/SelectionWatcher';
import StepsizeOutgoing from './stepsize/StepsizeOutgoing';
import StepsizeHelper from './stepsize/StepsizeHelper';
import { CompositeDisposable } from 'atom';
import GutterView from './interface/GutterView';
import os from 'os';
import * as ConfigManager from './ConfigManager';
import * as ColorScale from './interface/ColourScale';
import * as Analytics from './stepsize/Analytics';
let disposables = new CompositeDisposable();
let outgoing;
let gutters = new Map();
export const config = ConfigManager.getConfig();
export function activate(state) {
    disposables.add(atom.commands.add('atom-workspace', {
        'layer-atom:toggle': () => toggleGutterView(),
    }));
    if (os.platform() === 'darwin' && ConfigManager.get('searchInLayerEnabled')) {
        enableLayerSearch();
    }
    else {
        ConfigManager.set('searchInLayerEnabled', false);
    }
    Analytics.init();
}
async function layerEditorObserver(editor) {
    let watcher = new SelectionWatcher(editor);
    watcher.onSelection(function () {
        const event = outgoing.buildSelectionEvent(editor);
        outgoing.send(event);
    });
}
function enableLayerSearch() {
    StepsizeHelper.checkLayerInstallation()
        .then(() => {
        outgoing = new StepsizeOutgoing();
        atom.workspace.observeTextEditors(layerEditorObserver);
    })
        .catch(() => {
        ConfigManager.set('searchInLayerEnabled', false);
    });
}
function toggleGutterView() {
    const editor = atom.workspace.getActiveTextEditor();
    if (editor) {
        const gutter = gutters.get(editor);
        if (gutter) {
            if (gutter.isVisible()) {
                Analytics.track('Gutter hidden');
                gutter.hide();
            }
            else {
                Analytics.track('Gutter shown');
                gutter.show();
            }
        }
        else {
            Analytics.track('Gutter shown');
            gutters.set(editor, new GutterView(editor, outgoing));
            ColorScale.setEditor(editor);
        }
    }
}
export function deactivate() {
    disposables.dispose();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDO0FBSVosT0FBTyxnQkFBZ0IsTUFBTSw2QkFBNkIsQ0FBQztBQUMzRCxPQUFPLGdCQUFnQixNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sY0FBYyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLFVBQVUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxLQUFLLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEtBQUssVUFBVSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sS0FBSyxTQUFTLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsSUFBSSxXQUFXLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0FBQzVDLElBQUksUUFBMEIsQ0FBQztBQUMvQixJQUFJLE9BQU8sR0FBOEIsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVuRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBRWhELE1BQU0sbUJBQW1CLEtBQUs7SUFDNUIsV0FBVyxDQUFDLEdBQUcsQ0FDYixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNsQyxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixFQUFFO0tBQzlDLENBQUMsQ0FDSCxDQUFDO0lBQ0YsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLFFBQVEsSUFBSSxhQUFhLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLGlCQUFpQixFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sYUFBYSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBQ0QsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFFRCxLQUFLLDhCQUE4QixNQUFlO0lBQ2hELElBQUksT0FBTyxHQUFHLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUNsQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDtJQUNFLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRTtTQUNwQyxJQUFJLENBQUM7UUFDSixRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7U0FDRCxLQUFLLENBQUM7UUFDTCxhQUFhLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVEO0lBQ0UsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ3BELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDWCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDWCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixTQUFTLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ2hDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNoQixDQUFDO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN0RCxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU07SUFDSixXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgSUVkaXRvciA9IEF0b21Db3JlLklFZGl0b3I7XG5pbXBvcnQgSUd1dHRlclZpZXcgPSBBdG9tQ29yZS5JR3V0dGVyVmlldztcbmltcG9ydCBTZWxlY3Rpb25XYXRjaGVyIGZyb20gJy4vc3RlcHNpemUvU2VsZWN0aW9uV2F0Y2hlcic7XG5pbXBvcnQgU3RlcHNpemVPdXRnb2luZyBmcm9tICcuL3N0ZXBzaXplL1N0ZXBzaXplT3V0Z29pbmcnO1xuaW1wb3J0IFN0ZXBzaXplSGVscGVyIGZyb20gJy4vc3RlcHNpemUvU3RlcHNpemVIZWxwZXInO1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJ2F0b20nO1xuaW1wb3J0IEd1dHRlclZpZXcgZnJvbSAnLi9pbnRlcmZhY2UvR3V0dGVyVmlldyc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgQ29uZmlnTWFuYWdlciBmcm9tICcuL0NvbmZpZ01hbmFnZXInO1xuaW1wb3J0ICogYXMgQ29sb3JTY2FsZSBmcm9tICcuL2ludGVyZmFjZS9Db2xvdXJTY2FsZSc7XG5pbXBvcnQgKiBhcyBBbmFseXRpY3MgZnJvbSAnLi9zdGVwc2l6ZS9BbmFseXRpY3MnO1xuXG5sZXQgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xubGV0IG91dGdvaW5nOiBTdGVwc2l6ZU91dGdvaW5nO1xubGV0IGd1dHRlcnM6IE1hcDxJRWRpdG9yLCBJR3V0dGVyVmlldz4gPSBuZXcgTWFwKCk7XG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBDb25maWdNYW5hZ2VyLmdldENvbmZpZygpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoc3RhdGUpIHtcbiAgZGlzcG9zYWJsZXMuYWRkKFxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAgICdsYXllci1hdG9tOnRvZ2dsZSc6ICgpID0+IHRvZ2dsZUd1dHRlclZpZXcoKSxcbiAgICB9KVxuICApO1xuICBpZiAob3MucGxhdGZvcm0oKSA9PT0gJ2RhcndpbicgJiYgQ29uZmlnTWFuYWdlci5nZXQoJ3NlYXJjaEluTGF5ZXJFbmFibGVkJykpIHtcbiAgICBlbmFibGVMYXllclNlYXJjaCgpO1xuICB9IGVsc2Uge1xuICAgIENvbmZpZ01hbmFnZXIuc2V0KCdzZWFyY2hJbkxheWVyRW5hYmxlZCcsIGZhbHNlKTtcbiAgfVxuICBBbmFseXRpY3MuaW5pdCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsYXllckVkaXRvck9ic2VydmVyKGVkaXRvcjogSUVkaXRvcikge1xuICBsZXQgd2F0Y2hlciA9IG5ldyBTZWxlY3Rpb25XYXRjaGVyKGVkaXRvcik7XG4gIHdhdGNoZXIub25TZWxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZXZlbnQgPSBvdXRnb2luZy5idWlsZFNlbGVjdGlvbkV2ZW50KGVkaXRvcik7XG4gICAgb3V0Z29pbmcuc2VuZChldmVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlbmFibGVMYXllclNlYXJjaCgpIHtcbiAgU3RlcHNpemVIZWxwZXIuY2hlY2tMYXllckluc3RhbGxhdGlvbigpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgb3V0Z29pbmcgPSBuZXcgU3RlcHNpemVPdXRnb2luZygpO1xuICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKGxheWVyRWRpdG9yT2JzZXJ2ZXIpO1xuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIENvbmZpZ01hbmFnZXIuc2V0KCdzZWFyY2hJbkxheWVyRW5hYmxlZCcsIGZhbHNlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlR3V0dGVyVmlldygpIHtcbiAgY29uc3QgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICBpZiAoZWRpdG9yKSB7XG4gICAgY29uc3QgZ3V0dGVyID0gZ3V0dGVycy5nZXQoZWRpdG9yKTtcbiAgICBpZiAoZ3V0dGVyKSB7XG4gICAgICBpZiAoZ3V0dGVyLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIEFuYWx5dGljcy50cmFjaygnR3V0dGVyIGhpZGRlbicpO1xuICAgICAgICBndXR0ZXIuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQW5hbHl0aWNzLnRyYWNrKCdHdXR0ZXIgc2hvd24nKTtcbiAgICAgICAgZ3V0dGVyLnNob3coKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgQW5hbHl0aWNzLnRyYWNrKCdHdXR0ZXIgc2hvd24nKTtcbiAgICAgIGd1dHRlcnMuc2V0KGVkaXRvciwgbmV3IEd1dHRlclZpZXcoZWRpdG9yLCBvdXRnb2luZykpO1xuICAgICAgQ29sb3JTY2FsZS5zZXRFZGl0b3IoZWRpdG9yKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKTtcbn1cbiJdfQ==