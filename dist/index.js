'use babel';
import SelectionWatcher from './stepsize/SelectionWatcher';
import StepsizeOutgoing from './stepsize/StepsizeOutgoing';
import StepsizeHelper from './stepsize/StepsizeHelper';
import { CompositeDisposable } from 'atom';
import GutterView from './interface/GutterView';
import os from 'os';
import * as ConfigManager from './ConfigManager';
import * as ColorScale from './interface/ColourScale';
let disposables = new CompositeDisposable();
let outgoing;
let gutters = new Map();
export const config = ConfigManager.getConfig();
export function activate(state) {
    disposables.add(atom.commands.add('atom-workspace', {
        'layer-atom:toggle': () => toggleGutterView(),
    }));
    if (os.platform() === 'darwin' && ConfigManager.get('searchInLayerEnabled')) {
        enableLayerSearch();
    }
    else {
        ConfigManager.set('searchInLayerEnabled', false);
    }
}
async function layerEditorObserver(editor) {
    let watcher = new SelectionWatcher(editor);
    watcher.onSelection(function () {
        const event = outgoing.buildSelectionEvent(editor);
        outgoing.send(event);
    });
}
function enableLayerSearch() {
    StepsizeHelper.checkLayerInstallation()
        .then(() => {
        outgoing = new StepsizeOutgoing();
        atom.workspace.observeTextEditors(layerEditorObserver);
    })
        .catch(() => {
        ConfigManager.set('searchInLayerEnabled', false);
    });
}
function toggleGutterView() {
    const editor = atom.workspace.getActiveTextEditor();
    if (editor) {
        const gutter = gutters.get(editor);
        if (gutter) {
            if (gutter.isVisible()) {
                gutter.hide();
            }
            else {
                gutter.show();
            }
        }
        else {
            gutters.set(editor, new GutterView(editor, outgoing));
            ColorScale.setEditor(editor);
        }
    }
}
export function deactivate() {
    disposables.dispose();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDO0FBSVosT0FBTyxnQkFBZ0IsTUFBTSw2QkFBNkIsQ0FBQztBQUMzRCxPQUFPLGdCQUFnQixNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sY0FBYyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLFVBQVUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxLQUFLLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEtBQUssVUFBVSxNQUFNLHlCQUF5QixDQUFDO0FBRXRELElBQUksV0FBVyxHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQztBQUM1QyxJQUFJLFFBQTBCLENBQUM7QUFDL0IsSUFBSSxPQUFPLEdBQThCLElBQUksR0FBRyxFQUFFLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUVoRCxNQUFNLG1CQUFtQixLQUFLO0lBQzVCLFdBQVcsQ0FBQyxHQUFHLENBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7UUFDbEMsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRTtLQUM5QyxDQUFDLENBQ0gsQ0FBQztJQUNGLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxRQUFRLElBQUksYUFBYSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RSxpQkFBaUIsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLGFBQWEsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQztBQUNILENBQUM7QUFFRCxLQUFLLDhCQUE4QixNQUFlO0lBQ2hELElBQUksT0FBTyxHQUFHLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUNsQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDtJQUNFLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRTtTQUNwQyxJQUFJLENBQUM7UUFDSixRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7U0FDRCxLQUFLLENBQUM7UUFDTCxhQUFhLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVEO0lBQ0UsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ3BELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDWCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDWCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNoQixDQUFDO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDdEQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNO0lBQ0osV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IElFZGl0b3IgPSBBdG9tQ29yZS5JRWRpdG9yO1xuaW1wb3J0IElHdXR0ZXJWaWV3ID0gQXRvbUNvcmUuSUd1dHRlclZpZXc7XG5pbXBvcnQgU2VsZWN0aW9uV2F0Y2hlciBmcm9tICcuL3N0ZXBzaXplL1NlbGVjdGlvbldhdGNoZXInO1xuaW1wb3J0IFN0ZXBzaXplT3V0Z29pbmcgZnJvbSAnLi9zdGVwc2l6ZS9TdGVwc2l6ZU91dGdvaW5nJztcbmltcG9ydCBTdGVwc2l6ZUhlbHBlciBmcm9tICcuL3N0ZXBzaXplL1N0ZXBzaXplSGVscGVyJztcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJztcbmltcG9ydCBHdXR0ZXJWaWV3IGZyb20gJy4vaW50ZXJmYWNlL0d1dHRlclZpZXcnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIENvbmZpZ01hbmFnZXIgZnJvbSAnLi9Db25maWdNYW5hZ2VyJztcbmltcG9ydCAqIGFzIENvbG9yU2NhbGUgZnJvbSAnLi9pbnRlcmZhY2UvQ29sb3VyU2NhbGUnO1xuXG5sZXQgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xubGV0IG91dGdvaW5nOiBTdGVwc2l6ZU91dGdvaW5nO1xubGV0IGd1dHRlcnM6IE1hcDxJRWRpdG9yLCBJR3V0dGVyVmlldz4gPSBuZXcgTWFwKCk7XG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBDb25maWdNYW5hZ2VyLmdldENvbmZpZygpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoc3RhdGUpIHtcbiAgZGlzcG9zYWJsZXMuYWRkKFxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAgICdsYXllci1hdG9tOnRvZ2dsZSc6ICgpID0+IHRvZ2dsZUd1dHRlclZpZXcoKSxcbiAgICB9KVxuICApO1xuICBpZiAob3MucGxhdGZvcm0oKSA9PT0gJ2RhcndpbicgJiYgQ29uZmlnTWFuYWdlci5nZXQoJ3NlYXJjaEluTGF5ZXJFbmFibGVkJykpIHtcbiAgICBlbmFibGVMYXllclNlYXJjaCgpO1xuICB9IGVsc2Uge1xuICAgIENvbmZpZ01hbmFnZXIuc2V0KCdzZWFyY2hJbkxheWVyRW5hYmxlZCcsIGZhbHNlKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBsYXllckVkaXRvck9ic2VydmVyKGVkaXRvcjogSUVkaXRvcikge1xuICBsZXQgd2F0Y2hlciA9IG5ldyBTZWxlY3Rpb25XYXRjaGVyKGVkaXRvcik7XG4gIHdhdGNoZXIub25TZWxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZXZlbnQgPSBvdXRnb2luZy5idWlsZFNlbGVjdGlvbkV2ZW50KGVkaXRvcik7XG4gICAgb3V0Z29pbmcuc2VuZChldmVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlbmFibGVMYXllclNlYXJjaCgpIHtcbiAgU3RlcHNpemVIZWxwZXIuY2hlY2tMYXllckluc3RhbGxhdGlvbigpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgb3V0Z29pbmcgPSBuZXcgU3RlcHNpemVPdXRnb2luZygpO1xuICAgICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKGxheWVyRWRpdG9yT2JzZXJ2ZXIpO1xuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIENvbmZpZ01hbmFnZXIuc2V0KCdzZWFyY2hJbkxheWVyRW5hYmxlZCcsIGZhbHNlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlR3V0dGVyVmlldygpIHtcbiAgY29uc3QgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICBpZiAoZWRpdG9yKSB7XG4gICAgY29uc3QgZ3V0dGVyID0gZ3V0dGVycy5nZXQoZWRpdG9yKTtcbiAgICBpZiAoZ3V0dGVyKSB7XG4gICAgICBpZiAoZ3V0dGVyLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIGd1dHRlci5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBndXR0ZXIuc2hvdygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBndXR0ZXJzLnNldChlZGl0b3IsIG5ldyBHdXR0ZXJWaWV3KGVkaXRvciwgb3V0Z29pbmcpKTtcbiAgICAgIENvbG9yU2NhbGUuc2V0RWRpdG9yKGVkaXRvcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xuICBkaXNwb3NhYmxlcy5kaXNwb3NlKCk7XG59XG4iXX0=