'use babel';
import GutterResizeHandle from './GutterResizeHandle';
import { Emitter } from 'atom';
import ReactDOM from 'preact-compat';
import React from 'preact-compat';
import Item from '../components/GutterItem';
class GutterItem {
    constructor(data) {
        this.data = data;
        this.itemElement = document.createElement('div');
        this.itemElement.className = 'layer-gutter-item';
        this.itemElement.style['width'] = '100%';
        this.contentElement = document.createElement('div');
        this.itemElement.appendChild(this.contentElement);
        const resizeHandle = new GutterResizeHandle();
        this.resizeEmitter = resizeHandle.emitter;
        this.itemElement.appendChild(resizeHandle.element());
        this.emitter = new Emitter();
        this.boundMouseEnterListener = this.mouseEnterListener.bind(this);
        this.boundMouseLeaveListener = this.mouseLeaveListener.bind(this);
        this.itemElement.addEventListener('mouseenter', this.boundMouseEnterListener);
    }
    setIndicator(value) {
        this.inidcatorColor = value;
        this.itemElement.style['border-right'] = `4px solid ${value}`;
    }
    mouseEnterListener(event) {
        this.emitter.emit('mouseEnter', event);
        this.itemElement.addEventListener('mouseleave', this.boundMouseLeaveListener);
    }
    mouseLeaveListener(event) {
        this.emitter.emit('mouseLeave', event);
        this.itemElement.removeEventListener('mouseleave', this.boundMouseLeaveListener);
    }
    element() {
        const item = React.createElement(Item, {
            commit: this.data,
            emitter: this.emitter,
        });
        ReactDOM.render(item, this.contentElement);
        return this.itemElement;
    }
}
export default GutterItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3V0dGVySXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9pbnRlcmZhY2UvR3V0dGVySXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7QUFFWixPQUFPLGtCQUFrQixNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxRQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQztBQUVsQyxPQUFPLElBQUksTUFBTSwwQkFBMEIsQ0FBQztBQUU1QztJQVVFLFlBQVksSUFBSTtRQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQztRQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLENBQUM7UUFFekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVsRCxNQUFNLFlBQVksR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUMvQixZQUFZLEVBQ1osSUFBSSxDQUFDLHVCQUF1QixDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVNLFlBQVksQ0FBQyxLQUFLO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLGFBQWEsS0FBSyxFQUFFLENBQUM7SUFDaEUsQ0FBQztJQUVNLGtCQUFrQixDQUFDLEtBQWlCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUMvQixZQUFZLEVBQ1osSUFBSSxDQUFDLHVCQUF1QixDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVNLGtCQUFrQixDQUFDLEtBQWlCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUNsQyxZQUFZLEVBQ1osSUFBSSxDQUFDLHVCQUF1QixDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRTtZQUNyQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3RCLENBQUMsQ0FBQztRQUNILFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUFFRCxlQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgR3V0dGVyUmVzaXplSGFuZGxlIGZyb20gJy4vR3V0dGVyUmVzaXplSGFuZGxlJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICdhdG9tJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdwcmVhY3QtY29tcGF0JztcbmltcG9ydCBSZWFjdCBmcm9tICdwcmVhY3QtY29tcGF0JztcblxuaW1wb3J0IEl0ZW0gZnJvbSAnLi4vY29tcG9uZW50cy9HdXR0ZXJJdGVtJztcblxuY2xhc3MgR3V0dGVySXRlbSB7XG4gIGl0ZW1FbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcbiAgY29udGVudEVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50O1xuICByZXNpemVFbWl0dGVyOiBFbWl0dGVyO1xuICBlbWl0dGVyOiBFbWl0dGVyO1xuICBib3VuZE1vdXNlRW50ZXJMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjtcbiAgYm91bmRNb3VzZUxlYXZlTGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI7XG4gIGRhdGE6IGFueTtcbiAgaW5pZGNhdG9yQ29sb3I6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLml0ZW1FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5pdGVtRWxlbWVudC5jbGFzc05hbWUgPSAnbGF5ZXItZ3V0dGVyLWl0ZW0nO1xuICAgIHRoaXMuaXRlbUVsZW1lbnQuc3R5bGVbJ3dpZHRoJ10gPSAnMTAwJSc7XG5cbiAgICB0aGlzLmNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5pdGVtRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbGVtZW50KTtcblxuICAgIGNvbnN0IHJlc2l6ZUhhbmRsZSA9IG5ldyBHdXR0ZXJSZXNpemVIYW5kbGUoKTtcbiAgICB0aGlzLnJlc2l6ZUVtaXR0ZXIgPSByZXNpemVIYW5kbGUuZW1pdHRlcjtcbiAgICB0aGlzLml0ZW1FbGVtZW50LmFwcGVuZENoaWxkKHJlc2l6ZUhhbmRsZS5lbGVtZW50KCkpO1xuXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICB0aGlzLmJvdW5kTW91c2VFbnRlckxpc3RlbmVyID0gdGhpcy5tb3VzZUVudGVyTGlzdGVuZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmJvdW5kTW91c2VMZWF2ZUxpc3RlbmVyID0gdGhpcy5tb3VzZUxlYXZlTGlzdGVuZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLml0ZW1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnbW91c2VlbnRlcicsXG4gICAgICB0aGlzLmJvdW5kTW91c2VFbnRlckxpc3RlbmVyXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRJbmRpY2F0b3IodmFsdWUpIHtcbiAgICB0aGlzLmluaWRjYXRvckNvbG9yID0gdmFsdWU7XG4gICAgdGhpcy5pdGVtRWxlbWVudC5zdHlsZVsnYm9yZGVyLXJpZ2h0J10gPSBgNHB4IHNvbGlkICR7dmFsdWV9YDtcbiAgfVxuXG4gIHB1YmxpYyBtb3VzZUVudGVyTGlzdGVuZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnbW91c2VFbnRlcicsIGV2ZW50KTtcbiAgICB0aGlzLml0ZW1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnbW91c2VsZWF2ZScsXG4gICAgICB0aGlzLmJvdW5kTW91c2VMZWF2ZUxpc3RlbmVyXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBtb3VzZUxlYXZlTGlzdGVuZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnbW91c2VMZWF2ZScsIGV2ZW50KTtcbiAgICB0aGlzLml0ZW1FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAnbW91c2VsZWF2ZScsXG4gICAgICB0aGlzLmJvdW5kTW91c2VMZWF2ZUxpc3RlbmVyXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBlbGVtZW50KCkge1xuICAgIGNvbnN0IGl0ZW0gPSBSZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW0sIHtcbiAgICAgIGNvbW1pdDogdGhpcy5kYXRhLFxuICAgICAgZW1pdHRlcjogdGhpcy5lbWl0dGVyLFxuICAgIH0pO1xuICAgIFJlYWN0RE9NLnJlbmRlcihpdGVtLCB0aGlzLmNvbnRlbnRFbGVtZW50KTtcbiAgICByZXR1cm4gdGhpcy5pdGVtRWxlbWVudDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHdXR0ZXJJdGVtO1xuIl19