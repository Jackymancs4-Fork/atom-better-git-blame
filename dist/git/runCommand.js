'use babel';
import * as childProcess from 'child_process';
function runGitCommand(repoPath, command, shell = false) {
    const arguments = command.split(' ');
    const child = childProcess.spawn('git', arguments, { cwd: repoPath, shell });
    child.on('error', error => {
        throw error;
    });
    child.on('exit', exitCode => {
        if (exitCode !== 0) {
            throw new Error(`Git exited with unexpected code: ${exitCode}`);
        }
    });
    let stdOutPromise = new Promise((resolve, reject) => {
        let stdOut = '';
        child.stdout.on('data', data => (stdOut += data));
        child.stdout.on('end', () => resolve(stdOut));
        child.stdout.on('error', error => reject(error));
    });
    let stdErrPromise = new Promise((resolve, reject) => {
        let stdErr = '';
        child.stderr.on('data', data => (stdErr += data));
        child.stderr.on('end', () => resolve(stdErr));
        child.stderr.on('error', error => reject(error));
    });
    return new Promise((resolve, reject) => {
        Promise.all([stdOutPromise, stdErrPromise])
            .then(results => {
            const stdOut = results[0];
            const stdErr = results[1];
            if (stdErr !== '') {
                return reject(new Error(stdErr));
            }
            return resolve(stdOut);
        })
            .catch(err => {
            reject(err);
        });
    });
}
export default runGitCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9naXQvcnVuQ29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7QUFFWixPQUFPLEtBQUssWUFBWSxNQUFNLGVBQWUsQ0FBQztBQUU5Qyx1QkFDRSxRQUFnQixFQUNoQixPQUFlLEVBQ2YsUUFBaUIsS0FBSztJQUV0QixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUU3RSxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLO1FBQ3JCLE1BQU0sS0FBSyxDQUFDO0lBQ2QsQ0FBQyxDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRO1FBQ3ZCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEUsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxhQUFhLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUM5QyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzlDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLGFBQWEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQzlDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbEQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDOUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDeEMsSUFBSSxDQUFDLE9BQU87WUFDWCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbkMsQ0FBQztZQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLEdBQUc7WUFDUixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELGVBQWUsYUFBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5cbmltcG9ydCAqIGFzIGNoaWxkUHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuZnVuY3Rpb24gcnVuR2l0Q29tbWFuZChcbiAgcmVwb1BhdGg6IHN0cmluZyxcbiAgY29tbWFuZDogc3RyaW5nLFxuICBzaGVsbDogYm9vbGVhbiA9IGZhbHNlXG4pIHtcbiAgY29uc3QgYXJndW1lbnRzID0gY29tbWFuZC5zcGxpdCgnICcpO1xuICBjb25zdCBjaGlsZCA9IGNoaWxkUHJvY2Vzcy5zcGF3bignZ2l0JywgYXJndW1lbnRzLCB7IGN3ZDogcmVwb1BhdGgsIHNoZWxsIH0pO1xuXG4gIGNoaWxkLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG5cbiAgY2hpbGQub24oJ2V4aXQnLCBleGl0Q29kZSA9PiB7XG4gICAgaWYgKGV4aXRDb2RlICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEdpdCBleGl0ZWQgd2l0aCB1bmV4cGVjdGVkIGNvZGU6ICR7ZXhpdENvZGV9YCk7XG4gICAgfVxuICB9KTtcblxuICBsZXQgc3RkT3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgc3RkT3V0ID0gJyc7XG4gICAgY2hpbGQuc3Rkb3V0Lm9uKCdkYXRhJywgZGF0YSA9PiAoc3RkT3V0ICs9IGRhdGEpKTtcbiAgICBjaGlsZC5zdGRvdXQub24oJ2VuZCcsICgpID0+IHJlc29sdmUoc3RkT3V0KSk7XG4gICAgY2hpbGQuc3Rkb3V0Lm9uKCdlcnJvcicsIGVycm9yID0+IHJlamVjdChlcnJvcikpO1xuICB9KTtcblxuICBsZXQgc3RkRXJyUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgc3RkRXJyID0gJyc7XG4gICAgY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgZGF0YSA9PiAoc3RkRXJyICs9IGRhdGEpKTtcbiAgICBjaGlsZC5zdGRlcnIub24oJ2VuZCcsICgpID0+IHJlc29sdmUoc3RkRXJyKSk7XG4gICAgY2hpbGQuc3RkZXJyLm9uKCdlcnJvcicsIGVycm9yID0+IHJlamVjdChlcnJvcikpO1xuICB9KTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIFByb21pc2UuYWxsKFtzdGRPdXRQcm9taXNlLCBzdGRFcnJQcm9taXNlXSlcbiAgICAgIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgICBjb25zdCBzdGRPdXQgPSByZXN1bHRzWzBdO1xuICAgICAgICBjb25zdCBzdGRFcnIgPSByZXN1bHRzWzFdO1xuICAgICAgICBpZiAoc3RkRXJyICE9PSAnJykge1xuICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKHN0ZEVycikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlKHN0ZE91dCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBydW5HaXRDb21tYW5kO1xuIl19